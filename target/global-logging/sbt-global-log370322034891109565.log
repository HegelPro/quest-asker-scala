[0m[[0m[0mdebug[0m] [0m[0m> Exec(;Test/compile; collectAnalyses, None, Some(CommandSource(network-2)))[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(Test/compile, None, Some(CommandSource(network-2)))[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / compile[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"5","parents":[]},"eventTime":1619872563939,"message":"Compiling root","dataKind":"compile-task","data":{"target":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Compile"}}})[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to /home/hegelpro/projects/linux/quickstart/target/scala-2.13/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"compiling 1 Scala source to /home/hegelpro/projects/linux/quickstart/target/scala-2.13/classes ..."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/QuickstartRoutes.scala"},"buildTarget":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/HelloWorld.scala"},"buildTarget":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/Home.scala"},"buildTarget":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/Main.scala"},"buildTarget":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/Jokes.scala"},"buildTarget":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/QuickstartServer.scala"},"buildTarget":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"5","parents":[]},"eventTime":1619872564211,"message":"Compiled root","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Compile"},"errors":0,"warnings":0,"time":272}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"6","parents":[]},"eventTime":1619872564228,"message":"Compiling root-test","dataKind":"compile-task","data":{"target":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Test"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/test/scala/com/example/quickstart/HelloWorldSpec.scala"},"buildTarget":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"6","parents":[]},"eventTime":1619872564245,"message":"Compiled root-test","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/home/hegelpro/projects/linux/quickstart/#root/Test"},"errors":0,"warnings":0,"time":17}})[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed May 1, 2021 4:36:04 PM[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-2)))[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/home/hegelpro/projects/linux/quickstart/target/scala-2.13/zinc/inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed May 1, 2021 4:36:04 PM[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/Main.scala"},"position":{"line":6,"character":27}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:     QuickstartServer.stream[IO].compile.drain.as(ExitCode.Success)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/cancelRequest: JsonRpcNotificationMessage(2.0, $/cancelRequest, {"id":10})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/Main.scala"},"position":{"line":6,"character":19}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:     QuickstartServer.stream[IO].compile.drain.as(ExitCode.Success)[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/Main.scala"},"position":{"line":6,"character":16}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:     QuickstartServer.stream[IO].compile.drain.as(ExitCode.Success)[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol stream[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition potentials: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol QuickstartServer[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition potentials: Set(com.example.quickstart.QuickstartServer)[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector(Location(file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/QuickstartServer.scala, Range(Position(11, 0), Position(11, 23))))[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol QuickstartServer[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition potentials: Set(com.example.quickstart.QuickstartServer)[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector(Location(file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/QuickstartServer.scala, Range(Position(11, 0), Position(11, 23))))[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/QuickstartServer.scala","languageId":"scala","version":1,"text":"package com.example.quickstart\n\nimport cats.effect.{ConcurrentEffect, Timer}\nimport cats.implicits._\nimport fs2.Stream\nimport org.http4s.client.blaze.BlazeClientBuilder\nimport org.http4s.implicits._\nimport org.http4s.server.blaze.BlazeServerBuilder\nimport org.http4s.server.middleware.Logger\nimport scala.concurrent.ExecutionContext.global\n\nobject QuickstartServer {\n\n  def stream[F[_]: ConcurrentEffect](implicit T: Timer[F]): Stream[F, Nothing] = {\n    for {\n      client <- BlazeClientBuilder[F](global).stream\n      helloWorldAlg = HelloWorld.impl[F]\n      jokeAlg = Jokes.impl[F](client)\n\n      // Combine Service Routes into an HttpApp.\n      // Can also be done via a Router if you\n      // want to extract a segments not checked\n      // in the underlying routes.\n      httpApp = (\n        QuickstartRoutes.auth[F]() <+>\n        QuickstartRoutes.helloWorldRoutes[F](helloWorldAlg) <+>\n        QuickstartRoutes.jokeRoutes[F](jokeAlg)\n      ).orNotFound\n\n      // With Middlewares in place\n      finalHttpApp = Logger.httpApp(true, true)(httpApp)\n\n      exitCode <- BlazeServerBuilder[F](global)\n        .bindHttp(8080, \"0.0.0.0\")\n        .withHttpApp(finalHttpApp)\n        .serve\n    } yield exitCode\n  }.drain\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/QuickstartRoutes.scala","languageId":"scala","version":1,"text":"package com.example.quickstart\n\nimport cats.effect.Sync\nimport cats.implicits._\nimport org.http4s.HttpRoutes\nimport org.http4s.dsl.Http4sDsl\n\nobject QuickstartRoutes {\n\n  def jokeRoutes[F[_]: Sync](J: Jokes[F]): HttpRoutes[F] = {\n    val dsl = new Http4sDsl[F]{}\n    import dsl._\n    HttpRoutes.of[F] {\n      case GET -> Root / \"joke\" =>\n        for {\n          joke <- J.get\n          resp <- Ok(joke)\n        } yield resp\n    }\n  }\n\n  def auth[F[_]: Sync](): HttpRoutes[F] = {\n    val dsl = new Http4sDsl[F]{}\n    import dsl._\n    HttpRoutes.of[F] {\n      case GET -> Root =>\n        for {\n          resp <- Ok(\"<h1>Lol</h1>\")\n        } yield resp\n    }\n  }\n\n  def helloWorldRoutes[F[_]: Sync](H: HelloWorld[F]): HttpRoutes[F] = {\n    val dsl = new Http4sDsl[F]{}\n    import dsl._\n    HttpRoutes.of[F] {\n      case GET -> Root / \"hello\" / name =>\n        for {\n          greeting <- H.hello(HelloWorld.Name(name))\n          resp <- Ok(greeting)\n        } yield resp\n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///home/hegelpro/projects/linux/quickstart/src/main/scala/com/example/quickstart/QuickstartRoutes.scala"},"position":{"line":13,"character":19}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:       case GET -> Root / "joke" =>[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol Root[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition potentials: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
